# 数据库配置
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://123.207.85.155:3306/sms?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: Jj9/i3.LqiFB
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    initialSize: 1
    minIdle: 1
    maxActive: 20
    maxWait: 60000
    validationQuery: select 'x'
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    #配置监控统计拦截的filters，去掉后监控界面SQL无法统计，“wall”用于防火墙
    filters: stat,wall,log4j

  jpa:
    # Specify the DBMS
    database: MYSQL
    # Show or not log for each sql query
    show-sql: true
    hibernate:
      # Hibernate ddl auto (create, create-drop, update)
      # create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
      # create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
      # update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
      # validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
      ddl-auto: update
      # Naming strategy (org.hibernate.cfg.DefaultComponentSafeNamingStrategy)
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

mybatis:
  configuration:
    # 开启驼峰命名转换
    map-underscore-to-camel-case: true